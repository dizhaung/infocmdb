os: linux
language: shell

services:
  - docker

addons:
  apt:
    packages:
      - docker-ce

git:
  depth: false
  quiet: true

env:
  global:
    - DOCKER_COMPOSE_VERSION=1.24.1
    - BUILD_NPROC=8
    - BUILD_PERLPROC=20
    - COMPOSE_ENV=test
    - COMPOSE_ENV_PHP_VERSION=7.3
    - COMPOSE_HTTP_TIMEOUT=120
    - COMPOSE_INTERACTIVE_NO_CLI=1
    - DOCKER_WEB_HOSTNAME=infocmdb.local
    - IMAGE_TAG=ci
    - REGISTRY_TARGET=infonova

before_install:
  - git fetch --all --tags
  - echo "install specific docker-compose Version '${DOCKER_COMPOSE_VERSION}'."
  - sudo rm /usr/local/bin/docker-compose
  - curl -L https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-`uname -s`-`uname -m` > docker-compose
  - chmod +x docker-compose
  - sudo mv docker-compose /usr/local/bin
  - docker version
  - docker-compose version
  - export APP_WWW_DATA_USERID=$(id -u)

before_script:
  - set -e
  - git describe --tags --long --always > version_info.txt
  - echo -n "Cmdb Version "
  - cat version_info.txt
  - ./run setup
  - ./run build

script:
  - ./run up
  - ./run execute_tests unit --steps
  - ./run execute_tests api --steps
  - ./run execute_tests apiV2 --steps
  - ./run execute_tests functional --steps
  - ./run execute_tests acceptance --steps

after_script:
  - docker-compose logs
  - docker images

branches:
  only:
    - master
    - develop
    - /^v\d+\.\d+(\.\d+)?(-\S*)?$/

jobs:
  fast_finish: true
  allow_failures:
    - env: COMPOSE_ENV_PHP_VERSION=7
  include:
    - stage: "testing old-stable php"
      name: "PHP 7.1 Version"
      env: COMPOSE_ENV_PHP_VERSION=7.1

    - stage: "testing stable php"
      name: "PHP 7.3 Version"
      env: COMPOSE_ENV_PHP_VERSION=7.3

    - name: "PHP 7 latest Version versus develop"
      env: COMPOSE_ENV_PHP_VERSION=7
      if: branch = develop AND TRAVIS_EVENT_TYPE = cron

    - stage: "publishing"
      name: "publish release images"
      if: branch =~ /^v\d+\.\d+(\.\d+)?(-\S*)?$/
      env:
        - COMPOSE_ENV=prod
        - IMAGE_TAG=release
      script:
        - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        - bash deploy/publish_docker_images.sh ${IMAGE_TAG} ${REGISTRY_TARGET}

    - stage: "publishing"
      name: "publish nightly image"
      if: branch = develop AND type != pull_request
      env:
        - COMPOSE_ENV=prod
        - IMAGE_TAG=nightly
      script:
        - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        - docker-compose push

# vim:set et ts=2 sw=2:
